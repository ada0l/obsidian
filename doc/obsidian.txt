==============================================================================
------------------------------------------------------------------------------
*obsidian* provide base Obsidian functionality to your Neovim
*Obsidian*

MIT License Copyright (c) 2023 Andrey Varfolomeev

==============================================================================

That aimed to provide base Obsidian functionality to Neovim, but stay
stupid simple.

# Features ~

- Opening vault

- Creating new notes

- Creating/Opening daily notes

- Selecting and inserting templates to buffer with support placeholders
  like: ``{{title}}``, ``{{date}}``, ``{time}}``

- Searching notes with Telescope integration

- Searching backlinks of current note

# Setup ~

This module needs a setup with `require('obsidian').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `Obsidian`
which you can use for scripting or manually (with `:lua Obsidian.*`).

See |Obsidian.config| for available config settings.

Structure of project inpired by echasnovski/mini.nvim

------------------------------------------------------------------------------
                                                              *Obsidian.setup()*
                            `Obsidian.setup`({opts})
Parameters~
{opts} `(table|nil)` Module config table. See |Obsidian.config|.

Usage~
`require('Obsidian').setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
Module config

Default values:
>

  Obsidian.config = {
    -- Optional, showing echo
    silent = false,
    vaults = {
      {
        dir = '~/ObsidianVault/',
        daily = {
          dir = 'daily/',
          format = '%Y-%m-%d',
        },
        templates = {
          dir = 'templates/',
          date = '%Y-%d-%m',
          time = '%Y-%d-%m',
        },
        note = {
          dir = 'notes/',
          ---@param filename string
          ---@return string
          transformator = function(filename)
            if filename ~= nil and filename ~= '' then
              return filename
            end
            return string.format('%d', os.time())
          end,
        },
      }
    }
  }
<

------------------------------------------------------------------------------
                                                           *Obsidian.cd_vault()*
                             `Obsidian.cd_vault`()
Open vault directory

 Common way to use this function:

- `Obsidian.cd_vault()` - open directory - This moves your working directory to the vault.

------------------------------------------------------------------------------
                                                           *Obsidian.new_note()*
                        `Obsidian.new_note`({filename})
Create new note

Common ways to use this function:

- `Obsidian.new_note('new-note')` - create note in |Obsidian.get_current_vault().note.dir|.

- `Obsidian.new_note('new-note.md')` - create note in |Obsidian.get_current_vault().note.dir|.

- `vim.ui.input({ prompt = 'Write name of new note: ' }, function(name)`
  `  Obsidian.new_note(name)`
  `end)` - create note in |Obsidian.get_current_vault().note.dir|.
Parameters~
{filename} `(string)`

------------------------------------------------------------------------------
                                                         *Obsidian.open_today()*
                         `Obsidian.open_today`({shift})
Open today note

Common ways to use this function:

- `Obsidian.open_today()` - open today note in |Obsidian.get_current_vault().daily.dir|
  with |Obsidian.get_current_vault().daily.format| format.

- `vim.ui.input({ prompt = 'Write name of new note: ' }, function(name)`
     `Obsidian.new_note(name)`
  `end)` - also you can use it to open daily note with some time shift.
Parameters~
{shift} `(integer)`

------------------------------------------------------------------------------
                                                  *Obsidian.generate_template()*
          `Obsidian.generate_template`({template_content}, {filename})
Generate template

Generates text from the template body to be inserted into the note
Parameters~
{template_content} `(string)`
{filename} `(string)`
Return~
`(string)`

------------------------------------------------------------------------------
                                                    *Obsidian.insert_template()*
                  `Obsidian.insert_template`({template_path})
Insert template to current buffer

Parameters~
{template_path} `(string)`

------------------------------------------------------------------------------
                                                    *Obsidian.select_template()*
                    `Obsidian.select_template`({method_str})
Select template

Common ways to use this function:

- `Obsidian.select_template()`- This brings up a vim.ui.select for selecting a
  template for later pasting into current buffer.

- `Obsidian.select_template('native')` - This brings up a vim.ui.select for selecting a
  template for later pasting into current buffer.

- `Obsidian.select_template('telescope')`- This brings up a telescope for selecting a
  template for later pasting into current buffer.
Parameters~
{method_str} `(string)` - one of selection method. It can equal 'native' or 'telescope'

------------------------------------------------------------------------------
                                             *Obsidian.select_template_native()*
                 `Obsidian.select_template_native`({callback})
Parameters~
{callback} `(function)`

------------------------------------------------------------------------------
                                          *Obsidian.select_template_telescope()*
                `Obsidian.select_template_telescope`({callback})
Parameters~
{callback} `(function)`

------------------------------------------------------------------------------
                                                        *Obsidian.search_note()*
                            `Obsidian.search_note`()
Search note

Common ways to use this function:

- `Obsidian.search_note()` - This brings up a telescope for search a
  notes in |Obsidian.get_current_vault().dir|

------------------------------------------------------------------------------
                                                   *Obsidian.select_backlinks()*
                   `Obsidian.select_backlinks`({method_str})
Select backlinks

Common ways to use this function:

- `Obsidian.select_backlinks()` - This brings up a vim.ui.select for search a
  backlinks for current note.

- `Obsidian.select_backlinks('native')` - This brings up a vim.ui.select for search a
  backlinks for current note.

- `Obsidian.select_backlinks('telescope')` - This brings up a telescope for search a
  backlinks for current note.
Parameters~
{method_str} `(string)` - one of selection method. It can equal 'native' or 'telescope'

------------------------------------------------------------------------------
                                                              *Obsidian.go_to()*
                               `Obsidian.go_to`()
to note by wiki link under cursor

Common ways to use this function:

- `Obsidian.got_to()`

It calls edit for file if file with it name only one.

It calls vim.ui.select if file with it name few. However, It calls edit for file
too after selection.

------------------------------------------------------------------------------
                                                             *Obsidian.rename()*
                         `Obsidian.rename`({new_name})
Rename current file with updating links

Common ways to use this function:

- `Obsidian.rename('new-note')`

- `vim.ui.input({ prompt = 'Rename file to' }, function(name)`
  `  Obsidian.rename(name)`
  `end)`
Parameters~
{filename} `(string)`

------------------------------------------------------------------------------
                                                     *Obsidian.get_cmp_source()*
                          `Obsidian.get_cmp_source`()
Cmp source

Common ways to use this function:

- `require('cmp').register_source('obsidian', require('obsidian').get_cmp_source().new())`
Return~
`(table)`

 vim:tw=78:ts=8:noet:ft=help:norl:
